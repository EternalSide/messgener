// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text
username String @unique



  directMessages DirectMessage[]



  conversationsInitiated Conversation[] @relation("UserOne")
  conversationsReceived Conversation[] @relation("UserTwo")


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Conversation {
  id String @id @default(uuid())

  userOneId String
  userOne User @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)

  userTwoId String
  userTwo User @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([userTwoId])

  @@unique([userOneId, userTwoId])
}





model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([conversationId])
}